[
  {
    "id": 200001,
    "name": "«Хорошие» и «плохие» варианты параллельного запуска Selenium WebDriver тестов",
    "description": "<p>Параллельный запуск тестов не просто желание, но острая необходимость — стандартная задача, с которой рано или поздно столкнется каждый проект, за исключением, разве что, совсем небольших и краткосрочных. Иногда вопрос параллелизации тестов превращается в сложный или даже почти не выполнимый. Антон расскажет, как избежать подобной ситуации, какие рекомендации и инструменты существуют, какую архитектуру стоит выбрать изначально, каких решений следует избегать. Докладчик ответит на все эти актуальные вопросы и приведёт множество примеров для наглядности и практического подтверждения.</p> <p>Вместе со слушателями Антон проговорит «хорошие» варианты параллельного запуска Автоматизированных тестов, но также рассмотрит ситуацию с противоположной стороны «от противного». Будет проанализирован десяток «плохих» решений по параллелизации на реальных примерах: сложных, медленных, дорогих, не эффективных. Фактически, беседа будет состоять из двух частей: «что такое хорошо и что такое плохо» в примерах, с аргументацией и рекомендациями.</p>",
    "speakerId": 300001,
    "eventId": 100001,
    "partnerId": 400001,
    "partnerStatus": 1,
    "status": 4,
    "source": "manual",
    "rating": null,
    "tags": [
      "#selenium",
      "#paralell"
    ]
  },
  {
    "id": 200002,
    "name": "Hero’s Journey to Perfect System Tests — Eight Assessment Criteria for Tests’ Architecture Design",
    "description": "<p>What is the quest of every QA Hero? It is to find the golden recipe for the perfect system tests’ design — describing how to achieve fast, reliable, easy to understand and maintain tests. Anton is going to tell you his story of how he managed to complete this quest. The journey is going to introduce common problems and mistakes to you in the process of designing test automation frameworks, such as not following single responsibility principle, not enough code reuse, and bad object-oriented programming (OOP) design. The author is going to share with you how he and his teammates managed to solve these issues through the application of eight assessment criteria. Usually, people want to improve their tests but do not have quality metrics to determine which version of their improvements is most beneficial to their projects. The presented assessment framework can help you to figure out which is the best possible enhancement that you need to introduce into your system tests and so make them more stable, reliable and maintainable.</p>",
    "speakerId": 300002,
    "eventId": 100001,
    "status": 4,
    "source": "jira",
    "rating": null,
    "tags": [
      "#automaticTesting"
    ]
  },
  {
    "id": 200003,
    "name": "No Such Thing as Manual Testing and Other Confusions",
    "description": "<p>Software Testing is a young discipline and as with many new things, it is not yet fully understood. Is software testing a technical problem to be solved by engineering solutions? What exactly is the goal of testing? What can you do to become a world-class tester?</p> <p>A world-class tester understands that we are confronted with a techno-human system and that our goal as testers is to extract and deliver information about the product in a way that help stakeholders to make the right decisions. Having said that, it does not make a lot of sense to distinguish between manual and automated testing as this categorization is not very helpful. Ilari Henrik Aegerter presents a model of software testing that takes both engineering and social aspects into consideration. A lively discussion during the presentation is very welcome.</p>",
    "speakerId": 300003,
    "eventId": 100001,
    "status": 4,
    "source": "jira",
    "rating": null,
    "tags": [
    ]
  },
  {
    "id": 200004,
    "name": "Stupid Metrics Tricks and How to Avoid Them",
    "description": "<p>If you have been in software engineering for a while — or in fact just in the working world in general for a while — you’ve probably seen someone do something stupid with metrics. Such mistakes raise a whole bunch of interesting questions. What are the most common metrics mistakes? Why are they mistakes? Why do people make these mistakes? Are you making these mistakes? Why use metrics at all, when there are so many mistakes? In this talk, Rex will give real-world examples of these mistakes, explain the management and economic theories behind metrics, and help you find ways to implement metrics that aren’t stupid.</p> <p>A world-class tester understands that we are confronted with a techno-human system and that our goal as testers is to extract and deliver information about the product in a way that help stakeholders to make the right decisions. Having said that, it does not make a lot of sense to distinguish between manual and automated testing as this categorization is not very helpful. Ilari Henrik Aegerter presents a model of software testing that takes both engineering and social aspects into consideration. A lively discussion during the presentation is very welcome.<p>",
    "speakerId": 300004,
    "eventId": 100001,
    "status": 3,
    "source": "jira",
    "rating": null,
    "tags": [
      "#metrics"
    ]
  },
  {
    "id": 200005,
    "name": "«Хорошие» и «плохие» варианты параллельного запуска Selenium WebDriver тестов",
    "description": "<p>Параллельный запуск тестов не просто желание, но острая необходимость — стандартная задача, с которой рано или поздно столкнется каждый проект, за исключением, разве что, совсем небольших и краткосрочных. Иногда вопрос параллелизации тестов превращается в сложный или даже почти не выполнимый. Антон расскажет, как избежать подобной ситуации, какие рекомендации и инструменты существуют, какую архитектуру стоит выбрать изначально, каких решений следует избегать. Докладчик ответит на все эти актуальные вопросы и приведёт множество примеров для наглядности и практического подтверждения.</p> <p>Вместе со слушателями Антон проговорит «хорошие» варианты параллельного запуска Автоматизированных тестов, но также рассмотрит ситуацию с противоположной стороны «от противного». Будет проанализирован десяток «плохих» решений по параллелизации на реальных примерах: сложных, медленных, дорогих, не эффективных. Фактически, беседа будет состоять из двух частей: «что такое хорошо и что такое плохо» в примерах, с аргументацией и рекомендациями.</p>",
    "speakerId": 300001,
    "eventId": 100002,
    "partnerId": 400001,
    "status": 2,
    "source": "jira",
    "rating": null,
    "tags": [
      "#selenium",
      "#paralell"
    ]
  },
  {
    "id": 200006,
    "name": "The Lord of the Strings: Two Scours",
    "description": "<p>java.lang.String — один из наиболее часто используемых классов в Java-приложениях. Не удивительно, что мы пытаемся его улучшать и микро-, и макро-оптимизациями. В докладе будут освещены вопросы рациональности, подходов к реализации, практических граблей, с которыми сталкиваются разработчики JDK, пытающиеся ничего не сломать в огромной экосистеме, а также чем эта подковёрная деятельность грозит простым пользователям.</p><p>В этом докладе мы посмотрим на две грядущие фичи в JDK 9, направленные на оптимизацию строк: Compact Strings, сжимающие строки с однобайтовыми символами, что улучшает футпринт и даже общую производительность; и Indify String Concat, использующий магию invokedynamic для конкатенации строк, позволяющий подкручивать реализацию конкатенации без рекомпиляции программ.</p>",
    "speakerId": 300005,
    "eventId": 100003,
    "partnerId": null,
    "status": 9,
    "source": "jira",
    "rating": 99,
    "tags": [
      "#String",
      "#JDK9"
    ]
  },
  {
    "id": 200007,
    "name": "Если не Unsafe, то кто: восход VarHandles",
    "description": "<p>sun.misc.Unsafe уйдёт и МЫ ВСЕ УМРЁМ! В этом докладе мы посмотрим на работы вокруг VarHandles (JEP 193): что там за API, как в крупную клетку устроена референсная реализация, какие новые режимы доступа (acquire/release, opaque/relaxed, compareAndSet/compareAndExchange) она даёт, и как мы умудряемся её скомпилировать в практически голые доступы.</p><p>Кроме того, мы посмотрим на то, какой Unsafe плохой, какие грабли нам подкладывают текущие JDK/JVM, какие хардварные проблемы подтачивают красивый гранит реализации. С позитивной стороны мы увидим побочные улучшения в JDK/JVM: оптимизации в ByteBuffers, Atomic*FieldUpdaters, и прочие общие кодогенерационные улучшения.</p>",
    "speakerId": 300005,
    "eventId": 100003,
    "partnerId": null,
    "status": 9,
    "source": "jira",
    "rating": 97,
    "tags": [
      "#Unsafe",
      "#JDK9"
    ]
  },
  {
    "id": 200008,
    "name": "Мифы о Spark или может ли пользоваться Spark обычный Java-разработчик",
    "description": "<p>sun.misc.Unsafe уйдёт и МЫ ВСЕ УМРЁМ! В этом докладе мы посмотрим на работы вокруг VarHandles (JEP 193): что там за API, как в крупную клетку устроена референсная реализация, какие новые режимы доступа (acquire/release, opaque/relaxed, compareAndSet/compareAndExchange) она даёт, и как мы умудряемся её скомпилировать в практически голые доступы.</p><p>Кроме того, мы посмотрим на то, какой Unsafe плохой, какие грабли нам подкладывают текущие JDK/JVM, какие хардварные проблемы подтачивают красивый гранит реализации. С позитивной стороны мы увидим побочные улучшения в JDK/JVM: оптимизации в ByteBuffers, Atomic*FieldUpdaters, и прочие общие кодогенерационные улучшения.</p>",
    "speakerId": 300006,
    "eventId": 100003,
    "partnerId": null,
    "status": 9,
    "source": "jira",
    "rating": 92.1,
    "tags": [
      "#Spark"
    ]
  },
  {
    "id": 200009,
    "name": "Глубже стек-трейсов, шире хип-дампов",
    "description": "<p>Stack trace и heap dump - не просто инструменты отладки; это потайные дверцы к самым недрам виртуальной Java машины. Доклад будет посвящён малоизвестным особенностям JDK, так или иначе связанным с обоходом хипа и стеками потоков.</p><p>Мы разберём:</p><ul><li>как снимать дампы в продакшне без побочных эффектов;</li><li>как работают утилиты jmap и jstack изнутри, и в чём хитрость forced режима;</li><li>почему все профилировщики врут, и как с этим бороться;</li><li>познакомимся с новым Stack-Walking API в Java 9;</li><li>научимся сканировать Heap средствами JVMTI;</li><li>узнаем о недокументированных функциях Хотспота и других интересных штуках.</li></ul>",
    "speakerId": 300007,
    "eventId": 100003,
    "partnerId": 400002,
    "status": 9,
    "source": "jira",
    "rating": 93,
    "tags": [
      "#Java9"
    ]
  },
  {
    "id": 200010,
    "name": "Распределенные системы в Одноклассниках",
    "description": "<p>«Одноклассники» состоят из тысяч серверов, большая часть которых участвует в онлайн-обработке запросов пользователей. Каждый из этих серверов владеет только частью данных или логики. Эти части в социальной сети изолировать друг от друга невозможно, поэтому между серверами происходит много сетевого взаимодействия, разнообразного и большого по объему. Таким образом, Одноклассники — это одна из самых больших, сложных и нагруженных распределенных систем в мире.</p><p>В этом докладе Олег расскажет об опыте построения отказоустойчивых распределенных систем на Java, основных ошибках и отказах, приемах их тестирования и диагностики. Также речь пойдет об авариях в распределенных системах и методах их предупреждения.</p>",
    "speakerId": 300008,
    "eventId": 100003,
    "partnerId": 400002,
    "status": 8,
    "source": "jira",
    "rating": 88,
    "tags": [
    ]
  },
  {
    "id": 200011,
    "name": "Escape analysis и скаляризация",
    "description": "<p>Escape analysis и scalar replacement появились в Java еще в версии 1.6, а их включение действительно может заметно снизить нагрузку на GC. Но вот надежного понимания, в каких конкретных участках кода на скаляризацию можно положиться, а в каких — нет, у нас за эти годы так и не сложилось. В сети можно найти массу историй успеха в духе «а вот в таком коде совсем-совсем нет аллокаций!», приведенный код часто оказывается очень хрупким: иногда достаточно поправить одну-две строчки, как все волшебство исчезает.</p><p>Данный доклад — попытка привнести больше понимания в этот вопрос. Руслан кратко опишет сам алгоритм escape-анализа и его врожденные ограничения. На примерах будут рассмотрены ограничения реализации его в JIT-компиляторе.</p>",
    "speakerId": 300009,
    "eventId": 100003,
    "partnerId": 400003,
    "status": 8,
    "source": "jira",
    "rating": 91,
    "tags": [
    ]
  },
  {
    "id": 200012,
    "name": "No Such Thing as Manual Testing and Other Confusions",
    "description": "<p>Software Testing is a young discipline and as with many new things, it is not yet fully understood. Is software testing a technical problem to be solved by engineering solutions? What exactly is the goal of testing? What can you do to become a world-class tester?</p> <p>A world-class tester understands that we are confronted with a techno-human system and that our goal as testers is to extract and deliver information about the product in a way that help stakeholders to make the right decisions. Having said that, it does not make a lot of sense to distinguish between manual and automated testing as this categorization is not very helpful. Ilari Henrik Aegerter presents a model of software testing that takes both engineering and social aspects into consideration. A lively discussion during the presentation is very welcome.</p>",
    "speakerId": 300003,
    "eventId": 100002,
    "status": 1,
    "source": "jira",
    "rating": null,
    "tags": [
    ]
  },
  {
    "id": 200013,
    "name": "Работает — не трогай! Или зачем мы опять переделали всю архитектуру",
    "description": "<p>Нет, ну естественно мы всё планировали заранее. Нагрузку, модель использования, необходимые фичи. И как всегда в разработке софта, «что-то пошло не так.»</p><p>Bintray изначально разрабатывался как высоконагруженная распределенная система, мы готовились к масштабу, и всё равно, когда оно всё навалилось, нам пришлось несладко.</p><p>На этом докладе я представлю вам два года динамичной архитектуры проекта, что было, что мы меняли, что стало, и самое главное — почему. На примере наших успехов, проколов и «Разборов Полетов» я покажу вам столько граблей, что хватит на ваши нынешние и будущие проекты.</p>",
    "speakerId": 300010,
    "eventId": 100003,
    "status": 9,
    "source": "jira",
    "rating": 96.5,
    "tags": [
    ]
  },
  {
    "id": 200014,
    "name": "Близкие Контакты JMM-степени",
    "description": "<p>Со времён «Прагматики Java Memory Model» прошло больше двух лет. Но даже у изучавших прошлый доклад специалистов остались странные предубеждения, не подкреплённые спецификацией. В этом докладе мы попытаемся разобрать и развенчать часть этих предубеждений: про всемогущие барьеры, про реордеринги, про недосинхронизацию и другое недовелосипедостроение.</p><p>Доклад основан на уже опубликованной статье, и будет включать себя наиболее вкусные примеры. Доклад не будет останавливаться на базовых принципах модели и поэтому требует понимания JMM как минимум на уровне «Прагматики JMM».</p>",
    "speakerId": 300005,
    "eventId": 100004,
    "status": 9,
    "source": "jira",
    "rating": 97.1,
    "tags": [
      "#JMM"
    ]
  },
  {
    "id": 200015,
    "name": "Причуды Stream API",
    "description": "<p>Stream API уже не первый год с нами, и многие разработчики вовсю им пользуются. Однако за волшебным API скрывается обычный Java-код со своими причудами. Тагир вместе со слушателями приглядится к некоторым конструкциям, которые могут привести к неожиданным провалам в производительности, или работать не так, как вы ожидаете. Также мы посмотрим на примере, как можно расширить Stream API, добавив свою операцию, и при этом добиться наилучшей производительности. Доклад развивает темы, затронутые Тагиром в этом году на JPoint ('Странности Stream API') и JBreak ('Stream API: рекомендации лучших собаководов').</p>",
    "speakerId": 300011,
    "eventId": 100004,
    "status": 9,
    "source": "jira",
    "rating": 95,
    "tags": [
      "#streamAPI"
    ]
  }

]